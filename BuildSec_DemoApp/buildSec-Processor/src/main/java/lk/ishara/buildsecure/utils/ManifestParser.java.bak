package lk.ishara.buildsecure.utils;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.List;

import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.w3c.dom.Node;
import org.w3c.dom.Element;

import lk.ishara.buildsecure.core.AndroidManifest;
import lk.ishara.buildsecure.core.Constants;
import lk.ishara.buildsecure.core.UsesPermission;
import lk.ishara.buildsecure.core.UsesPermission.upStatus;

/**
 * Created by Ishara on 1/15/2018.
 */

public class ManifestParser {
    private static AndroidManifest androidManifest = new AndroidManifest();

    public AndroidManifest geModifiedManifest(String userManifest, List<String> permissionsList, boolean injectUsesPermissions, boolean allowDataBackup) {
        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
        dbf.setNamespaceAware(true);
        dbf.setIgnoringElementContentWhitespace(true);

        try {
            DocumentBuilder builder = dbf.newDocumentBuilder();
            InputSource is1 = new InputSource(userManifest);
            Document xmlDoc = builder.parse(is1);
            xmlDoc.setXmlStandalone(true);

            adjustNodes(xmlDoc, permissionsList, allowDataBackup);
            Node root = xmlDoc.getDocumentElement();
            root.normalize();

            TransformerFactory tf = TransformerFactory.newInstance();
            Transformer transformer = tf.newTransformer();
            transformer.setOutputProperty(OutputKeys.INDENT, "yes");

            FileOutputStream fos = new FileOutputStream(userManifest);
            transformer.transform(new DOMSource(xmlDoc), new StreamResult(new OutputStreamWriter(fos, "UTF-8")));
            fos.close();
        } catch (SAXException e) {
            System.exit(1);
        } catch (ParserConfigurationException e) {
            System.err.println(e);
            System.exit(1);
        } catch (IOException e) {
            System.err.println(e);
            System.exit(1);
        } catch (TransformerException e) {
            e.printStackTrace();
        }
        return androidManifest;
    }

    public AndroidManifest parse(String userManifest) {
        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
        dbf.setNamespaceAware(true);
        dbf.setIgnoringElementContentWhitespace(true);

        try {
            DocumentBuilder builder = dbf.newDocumentBuilder();
            InputSource is1 = new InputSource(userManifest);
            Document xmlDoc = builder.parse(is1);
            xmlDoc.setXmlStandalone(true);

            getManifest(xmlDoc);
        } catch (SAXException e) {
            System.exit(1);
        } catch (ParserConfigurationException e) {
            System.err.println(e);
            System.exit(1);
        } catch (IOException e) {
            System.err.println(e);
            System.exit(1);
        }
        return androidManifest;
    }

    public void getManifest(Document doc) {
        System.out.println("getManifest");
        String pkgName = doc.getDocumentElement().getAttribute("package");
        androidManifest.setPackageName(pkgName);
        String projectName = Util.getProjectName();

        androidManifest.setProjectName(projectName);
        NodeList appNodeList = doc.getElementsByTagName(Constants.APPLICATION);

        for (int i = 0; i < appNodeList.getLength(); i++) {
            Node nNode = appNodeList.item(i);
            if (nNode.getNodeType() == Node.ELEMENT_NODE) {
                Element eElement = (Element) nNode;

                if (projectName == null || projectName.isEmpty()) {
                    projectName = eElement.getAttribute(Constants.ANDROID_LABEL);
                }
                androidManifest.setProjectName(projectName);

                boolean allowBackUp = Boolean.parseBoolean(eElement.getAttribute(Constants.ANDROID_ALLOW_BKUP));
                androidManifest.setAllowBackup(allowBackUp);
            }
        }

        NodeList nList = doc.getElementsByTagName(Constants.USES_PERMISSION);

        for (int temp = 0; temp < nList.getLength(); temp++) {
            Node nNode = nList.item(temp);
            if (nNode.getNodeType() == Node.ELEMENT_NODE) {
                Element eElement = (Element) nNode;
                String permItem = eElement.getAttribute(Constants.ANDROID_NAME);

                UsesPermission up = new UsesPermission();
                up.setPermissionName(permItem);
                up.setUpStatus(upStatus.upS_existed);
                androidManifest.getUsesPermissions().add(up);
            }
        }
    }
    /**
     * @param doc
     * @param permissionsSet - set of uses permissions to be exported
     * @param disableDataBackup - new value of data backup to be exported
     */
    public void adjustNodes(Document doc, List<String> permissionsSet, boolean disableDataBackup) {
        Element root = doc.getDocumentElement();

        List<String> finalPermissionsSet = new ArrayList<>();
        List<Element> elementsToRemove = new ArrayList<>();
            NodeList nList = doc.getElementsByTagName(Constants.USES_PERMISSION);

            for (int temp = 0; temp < nList.getLength(); temp++) {
                Node nNode = nList.item(temp);
                if (nNode.getNodeType() == Node.ELEMENT_NODE) {
                    Element eElement = (Element) nNode;
                    String permItem = eElement.getAttribute(Constants.ANDROID_NAME);

                    UsesPermission up = new UsesPermission();
                    up.setPermissionName(permItem);


                    if (permissionsSet.contains(permItem)) {
                        if (androidManifest.getUsesPermissions().contains(up)){
                            up.setUpStatus(upStatus.upS_existed);
                        } else {
                            up.setUpStatus(upStatus.upS_added);
                        }
                    } else {
                        elementsToRemove.add(eElement);
                        up.setUpStatus(upStatus.upS_removed);
                    }
                }
            }

            for (Element el : elementsToRemove) {
                el.getParentNode().removeChild(el);
            }
        String pkgName = doc.getDocumentElement().getAttribute("package");
        androidManifest.setPackageName(pkgName);
        String projectName = Util.getProjectName();

        androidManifest.setProjectName(projectName);
        NodeList appNodeList = doc.getElementsByTagName(Constants.APPLICATION);
        Element appElement = (Element) appNodeList.item(0);

        for (int i = 0; i < appNodeList.getLength(); i++) {
            Node nNode = appNodeList.item(i);
            if (nNode.getNodeType() == Node.ELEMENT_NODE) {
                Element eElement = (Element) nNode;

                if (projectName == null || projectName.isEmpty()) {
                    projectName = eElement.getAttribute(Constants.ANDROID_LABEL);
                }
                androidManifest.setProjectName(projectName);

                boolean allowBackUp = Boolean.parseBoolean(eElement.getAttribute(Constants.ANDROID_ALLOW_BKUP));
                androidManifest.setAllowBackup(allowBackUp);
                if (disableDataBackup) {
                    eElement.setAttribute(Constants.ANDROID_ALLOW_BKUP, "false");
                }
            }
        }
       // if (injectUsesPermissions) {
            for (String p : finalPermissionsSet) {
                Element newElement = doc.createElement(Constants.USES_PERMISSION);
                newElement.setAttribute(Constants.ANDROID_NAME, "android.permission."+ p);
                Node newNode = doc.adoptNode(newElement);
                root.insertBefore(newNode, appElement);
                UsesPermission up = new UsesPermission();
                up.setPermissionName(p);
                up.setUpStatus(upStatus.upS_added);
            }
       // }
    }
}